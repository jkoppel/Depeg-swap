{
  "title": "14.2: UniswapPriceReader – Fetching Spot Prices from Uni V2",
  "id": "1UtwTbbU5iTc+J3sSo9nLREgWAMq/quggFAGiWadufs=",
  "originalId": 2869,
  "position": 77,
  "steps": [
    {
      "type": "textOnly",
      "description": "`UniswapPriceReader` is a read-only adapter around `Uniswap-V2`: given two **ERC-20** addresses it returns the spot price of the first in terms of the second, without exposing any other **DEX** internals.",
      "title": "",
      "id": "34346"
    },
    {
      "type": "highlight",
      "description": "Two public storage slots – `factory` and `router` – pin the exact `Uniswap V2` deployment the reader will talk to. After deployment nothing in the contract can mutate these addresses, so every price query always consults the same **AMM**.",
      "file": "contracts/readers/PriceReader.sol",
      "highlight": [
        {
          "start": 12,
          "end": 15
        }
      ],
      "title": "",
      "id": "34347"
    },
    {
      "type": "highlight",
      "description": "Those slots are injected once via the constructor.  This **dependency-injection pattern** avoids hard-coding network-specific addresses while still keeping the contract immutable afterwards.",
      "file": "contracts/readers/PriceReader.sol",
      "highlight": [
        {
          "start": 18,
          "end": 21
        }
      ],
      "title": "",
      "id": "34348"
    },
    {
      "type": "highlight",
      "description": "Control-flow inside `getTokenPrice` starts by asking the factory for the pair address. If the factory replies with `address(0)` the function halts immediately – no pointless router call – using a dedicated `PairNotExist` revert.",
      "file": "contracts/readers/PriceReader.sol",
      "highlight": [
        {
          "start": 24,
          "end": 28
        }
      ],
      "title": "",
      "id": "34349"
    },
    {
      "type": "highlight",
      "description": "Next, a two-element array `[destToken, sourceToken]` is built and passed to `router.getAmountsOut(1e18, path)`. Index `1` of the returned list is the amount of `sourceToken` obtainable for exactly `1e18` wei of `destToken`, i.e. the spot price.",
      "file": "contracts/readers/PriceReader.sol",
      "highlight": [
        {
          "start": 30,
          "end": 33
        }
      ],
      "title": "",
      "id": "34350"
    },
    {
      "type": "highlight",
      "description": "The custom error is just four bytes on-chain yet gives off-chain callers a precise signal that the requested market does not exist, letting bots or dashboards distinguish **pair missing** from other failures.",
      "file": "contracts/readers/PriceReader.sol",
      "highlight": [
        {
          "start": 16,
          "end": 17
        }
      ],
      "title": "",
      "id": "34351"
    },
    {
      "type": "textOnly",
      "description": "Every function is `view`, no state ever changes, and storage reads are trivial – making the reader cheap, side-effect-free, and ideal for keepers, MEV searchers, or UI dashboards that need fast spot prices.",
      "title": "",
      "id": "34352"
    }
  ]
}