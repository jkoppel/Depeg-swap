{
  "title": "11.5: Flash-Swap Mechanics & Callback",
  "id": "eDpW0qGu9d3B/9ZkUSm/50XDBdqomVab9DdWADdUriU=",
  "originalId": 2819,
  "position": 56,
  "steps": [
    {
      "type": "textOnly",
      "description": "The router's flash-swap is the short, atomic segment that both **BUY** (`RA→DS`) and **SELL** (`DS→RA`) share.  We will:\n\n* watch the two callers converge on `__flashSwap`,\n* see how `CallbackData` travels through `hook.swap`,\n* follow `CorkCall`'s **dispatcher**,\n* step through the **BUY** repayment logic, then its **SELL** mirror,\n\nso you can mentally simulate **borrow → do-thing → repay**.",
      "title": "",
      "id": "33741"
    },
    {
      "type": "highlight",
      "description": "**Buy flow**: after computing how much RA must be borrowed, `_swapRaforDs` finishes by invoking `__flashSwap`. Notice `buyDs` is true and the user’s RA amount (`provided`) is forwarded.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 354,
          "end": 365
        }
      ],
      "title": "",
      "id": "33742"
    },
    {
      "type": "highlight",
      "description": "Sell flow takes the symmetrical route – here `__swapDsforRa` calls the same `__flashSwap` but with `ctAmount` (not `raAmount`) and `buyDs` set to false.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 602,
          "end": 620
        }
      ],
      "title": "",
      "id": "33743"
    },
    {
      "type": "highlight",
      "description": "Inside **__flashSwap** (lines 633-638):\n1. It decides which token is the \"borrowed\" side.\n2. Packs `CallbackData` {direction, caller, borrowed, provided, reserveId, dsId}.\n3. Passes both token amounts and the ABI-encoded data to `hook.swap` – this causes the `UniV4` pool to hand the loan to the router and immediately schedule the callback.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 622,
          "end": 639
        }
      ],
      "title": "",
      "id": "33744"
    },
    {
      "type": "highlight",
      "description": "`CorkCall` is the hook's callback. First it decodes `CallbackData`, fetches the reserve, and asserts that:\n- the call arrived through the hook or its forwarder, and\n- the original `sender` was the router itself.\nThese guards ensure only our own **flash-swaps** reach the internal handlers.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 641,
          "end": 659
        }
      ],
      "title": "",
      "id": "33745"
    },
    {
      "type": "highlight",
      "description": "`CorkCall` then branches:\n- `buyDs` → repayment token must be `CT`, jump to `__afterFlashswapBuy`.\n- else (sell) → repayment token must be `RA`, jump to `__afterFlashswapSell`.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 658,
          "end": 672
        }
      ],
      "title": "",
      "id": "33746"
    },
    {
      "type": "highlight",
      "description": "**afterFlashswapBuy phase 1 — turning RA into CT & DS:**\nThis first phase handles the conversion of reserve assets (RA) into collateral tokens (CT). The router first sets up permission for the module core to access the combined amount of reserve assets, then initiates the PSM deposit to perform the conversion.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 687,
          "end": 706
        }
      ],
      "title": "",
      "id": "33747"
    },
    {
      "type": "highlight",
      "description": "**Phase 2 — refund logic:**\nIf PSM returned more CT than the pool actually needs (`actualRepaymentAmount`), the surplus is sent to the buyer (line 722).  The amount is also stored in `ReturnDataSlotLib` so callers can read the exact refund.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 707,
          "end": 726
        }
      ],
      "title": "",
      "id": "33748"
    },
    {
      "type": "highlight",
      "description": "**Phase 3 — final settlement:**\n- `DS` tokens generated by the `PSM` are delivered to the buyer (line 729).\n- Required `CT` is transferred back to the pool (line 731) – this fully repays the flash loan.\n- `ReturnDataSlotLib` remembers how much `DS` the user ultimately received.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 728,
          "end": 735
        }
      ],
      "title": "",
      "id": "33749"
    },
    {
      "type": "highlight",
      "description": "**__afterFlashswapSell** mirrors the process:\n- Approve both CT & DS for the module core (lines 748-750).\n- PSM redemption turns the CT+DS pair into RA (line 753).\n- Portion equal to `actualRepaymentAmount` repays the pool (line 766), remainder goes to seller (line 764).\n`ReturnDataSlotLib` records the RA payout.",
      "file": "contracts/core/flash-swaps/FlashSwapRouter.sol",
      "highlight": [
        {
          "start": 737,
          "end": 769
        }
      ],
      "title": "",
      "id": "33750"
    },
    {
      "type": "textOnly",
      "description": "Timeline you can now replay mentally:\nBUY\n1. User `RA` arrives; router borrows extra `RA` via `__flashSwap`.\n2. Callback deposits all `RA` into `PSM`.\n3. `PSM` returns `CT` & `DS` → surplus `CT` refunded, `DS` to user, `CT` repayment to pool.\nSELL\n1. User `DS` arrives; router borrows `CT` via `__flashSwap`.\n2. Callback redeems `CT`+`DS` in `PSM`.\n3. `PSM` returns `RA` → repay pool first, remainder to user.\nBecause repayment happens before `CorkCall` returns, the loan, the swap, and the repayment are one atomic state change.",
      "title": "",
      "id": "33751"
    }
  ]
}